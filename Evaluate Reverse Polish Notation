// use stack
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> res;
        for (int i = 0; i < tokens.size(); i++)
        {
            if (tokens[i] == "*" || tokens[i] == "+" || tokens[i] == "/" || tokens[i] == "-")
            {
                int tempres = 0;
                int operand1 = res.top();
                res.pop();
                int operand2 = res.top();
                res.pop();
                if (tokens[i] == "*")
                {
                    tempres = operand2 * operand1;
                }
                else if (tokens[i] == "+")
                {
                    tempres = operand2 + operand1;
                }
                else if (tokens[i] == "-")
                {
                    tempres = operand2 - operand1;
                }
                else if (tokens[i] == "/")
                {
                    tempres = operand2 / operand1;
                }
                res.push(tempres);
            }
            else
            {
                res.push(std::stoi(tokens[i]));
            }
        }
        return res.top();
    }
};

//use lameda expression
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        std::unordered_map<string, std::function<int(int, int)> > map = 
        {
            {"+", [ ] (int a, int b) { return a + b; } },
            {"-", [ ] (int a, int b) { return a - b; } },
            {"*", [ ] (int a, int b) { return a * b; } },
            {"/", [ ] (int a, int b) { return a / b; } }
        };
        std::stack<int> stk;
        for (auto &s : tokens)
        {   
            if (!map.count(s)) 
            {
                stk.push(std::stoi(s));
            }
            else
            {
                int operand2 = stk.top();
                stk.pop();
                int operand1 = stk.top();
                stk.pop();
                stk.push(map[s](operand1, operand2));
            }
        }
        return stk.top();
    }
};
